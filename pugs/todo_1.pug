extends ./_layout
block contents
  main
    todo
    script(type="riot/tag")
      todo
        h1 TODO
        form(onsubmit="{addTask}")
          input(value="{task}" onkeyup="{inputting}" placeholder="新規タスクを入力")
          select(onchange="{changePriority}")
            option(value="low"  selected="{priority==='low' }") 優先度：低
            option(value="mid"  selected="{priority==='mid' }") 優先度：中
            option(value="high" selected="{priority==='high'}") 優先度：高

          button(disabled="{task===''}") 追加
        ul
          li(each="{task, i in tasks}" class="{is_done: task.done}" onclick="{toggleTask.bind(this, i)}")
            input(type="checkbox" checked="{task.done}")/
            span.icon.is_high( if="{task.priority==='high'}") 高
            span.icon.is_mid(  if="{task.priority==='mid'}" ) 中
            span.icon.is_low(  if="{task.priority==='low'}" ) 低
            | {task.title}
        div
          button(disabled="{!hasCompletedTasks}" onclick="{clearCompletedTasks}") 完了したタスクを削除
        style(type="sass").
          .is_done {
            text-decoration: line-through;
            color: #ccc;
            .icon {
              &.is_high, &.is_mid, &.is_low {
                background: #ccc;
              }
            }
          }
          .icon {
            color:white;
            display: inline-block;
            margin: 0 5px;
            padding: 0 3px;
            &.is_high{ background: #F66; }
            &.is_mid { background: #CC6; }
            &.is_low { background: #66F; }
          }
        .
          this.input  = opts.input;
          this.todo   = opts.todo;

          this.task     = ""
          this.priority = ""
          this.tasks  = []

          this.input.on("changed", (text, priority) => {
            this.update({
              task    : text,
              priority: priority,
            });
          });
          this.todo.on("changed", (tasks, hasCompletedTasks) => {
            this.tasks  = tasks
            this.hasCompletedTasks = hasCompletedTasks
            this.input.init()
            this.update()
          });

          this.on("mount", function(){
            this.input.init()
            this.todo.addTask(
              {title:"aaa", priority:"mid", done:true},
              {title:"bbb", priority:"low", done:false},
            );
          })

          inputting(e) {
            this.input.text = e.target.value
          }
          changePriority(e) {
            this.input.priority = e.target.value
          }
          addTask(e) {
            e.preventDefault()
            this.todo.addTask({title:this.task, priority:this.priority, done:false});
          }
          toggleTask(i, e) {
            this.todo.toggle(i);
          }
          clearCompletedTasks(e) {
            this.todo.clearCompletedTasks();
          }
          clearAllTasks(e) {
            this.todo.clearAllTasks();
          }

block append js
  script.
    class Input {
      DEFAULT_TEXT() { return "" }
      DEFAULT_PRIO() { return "mid" }

      get text() { return this._text }
      set text(text) { this._text = text; this.changed() }
      get priority() { return this._priority }
      set priority(priority) { this._priority = priority; this.changed() }

      constructor() {
        riot.observable(this)
        this._text      = this.DEFAULT_TEXT();
        this._priority  = this.DEFAULT_PRIO();
      }
      changed() { //console.log(this.text)
        this.trigger("changed", this.text, this.priority)
      }
      init() {
        this._text      = this.DEFAULT_TEXT();
        this._priority  = this.DEFAULT_PRIO();
        this.changed();
      }
    }

    class Todo {
      get tasks() { return this._tasks; }
      constructor() {
        riot.observable(this)
        this._tasks = [];
      }

      changed() { //console.log(this.tasks)
        this.trigger("changed", this.tasks, this.hasCompletedTasks())
      }

      addTask(...tasks) { //console.log(tasks)
        for ( let task of tasks  ) {
          this._tasks.push(task);
        }
        this.changed();
      }
      toggle(i) {
        let task = this._tasks[i];
        if ( task ) {
          task.done = !task.done;
          this.changed();
        }
      }
      clearAllTasks() {
        this._tasks = [];
        this.changed();
      }
      clearCompletedTasks() {
        let tasks = this.tasks.filter(function(task, i){
          return !task.done
        });
        this._tasks = tasks;
        this.changed();
      }
      hasCompletedTasks() {
        let completed = this.tasks.some(function(task, i){
          return task.done
        });
        return completed;
      }
    }

    let todo  = new Todo();
    let input = new Input();
    //todo.addTask({title:"Test",done:false}, {title:"Hoge", done:false});

    riot.mount("todo", {todo:todo, input:input});
