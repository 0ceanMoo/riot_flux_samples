extends ./_layout
block riot
  main
    counter
    script(type="riot/tag")
      counter
        h1 counter
        div カウント数：
          span {stores.counter.num}
        div
          button(onclick="{inc}") +1
          button(onclick="{dec}") -1
          button(onclick="{reset}") リセット
        style.
          button {
            background: #ccc;
          }
        .
          const ACTION    = opts.action;
          const dispatcher= opts.dispatcher;
          this.stores     = dispatcher.stores

          this.stores.counter.on( "changed", () => { this.update() });

          inc(e) {
            e.preventUpdate = true;
            dispatcher.trigger(ACTION.COUNTER_INC)
          }
          dec(e) {
            e.preventUpdate = true;
            dispatcher.trigger(ACTION.COUNTER_DEC)
          }
          reset(e) {
            e.preventUpdate = true;
            dispatcher.trigger(ACTION.COUNTER_RESET)
          }

block append js
  script(src='/js/riot-sass.js')
  script(src='/js/riot-flux.js')
  script.
    class CounterStore extends Store {
      get num() { return this._num }
      constructor(num=0) {
        super();
        this._num = num;
      }
      inc()   { this._num++; this.changed() }
      dec()   { this._num--; this.changed() }
      reset() { this._num=0; this.changed() }
    }

    const ACTION = {
      COUNTER_INC   : "COUNTER_INC",
      COUNTER_DEC   : "COUNTER_DEC",
      COUNTER_RESET : "COUNTER_RESET",
    };

    let counter = new CounterStore(99);
    dispatcher.addStore("counter", counter);
    dispatcher.on(ACTION.COUNTER_INC,  function(stores){stores.counter.inc()});
    dispatcher.on(ACTION.COUNTER_DEC,  function(stores){stores.counter.dec()});
    dispatcher.on(ACTION.COUNTER_RESET,function(stores){stores.counter.reset()});

    riot.mount("counter", {dispatcher:dispatcher, action:ACTION});

block memo
  section
    h2 解説
    p fluxとかの解説はもうしない。アプリの設計方法というのを考えてみる
    ul
      li カウンターを実装するにあたって、必要なもの（オブジェクト）を考えてみる
        ul
          li 数字を保持するプロパティ
          li 加算、減算、リセットのメソッド
      li っで、これをStoreの子クラスとして作る

      li 加算、減算、リセット をActionとして定義する
      li ディスパッチャに
        ul
          li Storeを登録する
          li Action時のStoreへの処理を登録する
      li ビュー(riot)で
        ul
          li ボタンなりを配置して、任意のActionでdispatcherを叩けるUIを設置する

    h2 あとがき
    ul
      li ディスパッチャをたたけば、viewが勝手に更新されるという仕組みは非常に楽だ。
      li Actionをどうするか？どんなStoreクラスを作るか？は経験がものをいうと思うし、ここがキモだと感じてる。
      li サーバと通信するアプリの場合にも、通用するのかってのは１つの懸念ではある
