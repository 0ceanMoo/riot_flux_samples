extends ./_layout
block riot
  main
    todo
    script(type="riot/tag")
      todo
        h1 TODO - riotタグを分割してみる
        todo-input(action="{opts.action}",dispatcher="{opts.dispatcher}")
        todo-list(action="{opts.action}", dispatcher="{opts.dispatcher}")
        |
        |
        .
          const ACTION    = opts.action;
          const dispatcher= opts.dispatcher;
          this.stores     = dispatcher.stores

          this.on("mount", function(){
            dispatcher.trigger(ACTION.TODO_ADD,
              {title:"riotで何か作ってみる", priority:"mid", done:true},
              {title:"fluxを実践してみる",   priority:"low", done:false},
            );
          })

      todo-input
        form(onsubmit="{addTask}")
          input(value="{stores.input.text}" onkeyup="{inputting}" placeholder="新規タスクを入力")
          select(onchange="{changePriority}")
            option(value="low"  selected="{stores.input.priority==='low' }") 優先度：低
            option(value="mid"  selected="{stores.input.priority==='mid' }") 優先度：中
            option(value="high" selected="{stores.input.priority==='high'}") 優先度：高

          button(disabled="{stores.input.text===''}") 追加
        |
        |
        .
          const ACTION    = opts.action;
          const dispatcher= opts.dispatcher;
          this.stores     = dispatcher.stores

          this.stores.input.on( "changed", () => { this.update() });
          //this.on("updated", function(){alert("todo-input")});

          addTask(e) {
            e.preventDefault()
            e.preventUpdate = true;
            dispatcher.trigger(ACTION.TODO_ADD, {title:this.stores.input.text, priority:this.stores.input.priority, done:false});
          }
          inputting(e) {
            e.preventUpdate = true;
            dispatcher.trigger(ACTION.INPUT_WRITING, e.target.value)
          }
          changePriority(e) {
            e.preventUpdate = true;
            dispatcher.trigger(ACTION.INPUT_CHANGE, e.target.value)
          }

      todo-list
        ul
          li(each="{task, i in stores.todo.tasks}" class="{is_done: task.done}" onclick="{toggleTask.bind(this, i)}")
            input(type="checkbox" checked="{task.done}")/
            span.icon.is_high( if="{task.priority==='high'}") 高
            span.icon.is_mid(  if="{task.priority==='mid'}" ) 中
            span.icon.is_low(  if="{task.priority==='low'}" ) 低
            | {task.title}
        div
          button(disabled="{!stores.todo.hasCompletedTasks}" onclick="{clearCompletedTasks}") 完了したタスクを削除
        style(type="sass").
          .is_done {
            text-decoration: line-through;
            color: #ccc;
            .icon {
              &.is_high, &.is_mid, &.is_low {
                background: #ccc;
              }
            }
          }
          .icon {
            color:white;
            display: inline-block;
            margin: 0 5px;
            padding: 0 3px;
            &.is_high{ background: #F66; }
            &.is_mid { background: #CC6; }
            &.is_low { background: #66F; }
          }
        .
          const ACTION    = opts.action;
          const dispatcher= opts.dispatcher;
          this.stores     = dispatcher.stores

          this.stores.todo.on( "changed", () => { this.update() });
          //this.on("updated", function(){alert("todo-list")});

          toggleTask(i, e) {
            e.preventUpdate = true;
            dispatcher.trigger(ACTION.TODO_TOGGLE, i)
          }

          clearCompletedTasks(e) {
            e.preventUpdate = true;
            dispatcher.trigger(ACTION.TODO_CLEAR)
          }
block append js
  script(src='/js/riot-sass.js')
  script(src='/js/riot-flux.js')
  script.
    // InputStoreクラスを定義
    class InputStore extends Store {
      DEFAULT_TEXT() { return "" }
      DEFAULT_PRIO() { return "mid" }

      get text() { return this._text }
      set text(text) { this._text = text; this.changed() }
      get priority() { return this._priority }
      set priority(priority) { this._priority = priority; this.changed() }

      constructor() {
        super();
        this._text      = this.DEFAULT_TEXT();
        this._priority  = this.DEFAULT_PRIO();
      }
      init() {
        this._text      = this.DEFAULT_TEXT();
        this._priority  = this.DEFAULT_PRIO();
        this.changed();
      }
    }

    // TodoStoreクラスを定義
    class TodoStore extends Store {
      get tasks() { return this._tasks; }
      get hasCompletedTasks() {
        let completed = this.tasks.some(function(task, i){
          return task.done
        });
        return completed;
      }
      constructor() {
        super();
        this._tasks = [];
      }

      addTask(...tasks) { //console.log(tasks)
        for ( const task of tasks  ) {
          this._tasks.push(task);
        }
        this.changed();
      }
      toggle(i) {
        let task = this._tasks[i];
        if ( task ) {
          task.done = !task.done;
          this.changed();
        }
      }
      clearCompletedTasks() {
        let tasks = this.tasks.filter(function(task, i){
          return !task.done
        });
        this._tasks = tasks;
        this.changed();
      }
    }

    // アクション作成
    const ACTION = {
      TODO_ADD      : "TODO_ADD",
      TODO_TOGGLE   : "TODO_TOGGLE",
      TODO_CLEAR    : "TODO_CLEAR",
      INPUT_WRITING : "INPUT_WRITING",
      INPUT_CHANGE  : "INPUT_CHANGE",
    };

    // ディスパッチャの設定
    dispatcher.addStore("todo",   new TodoStore());
    dispatcher.addStore("input",  new InputStore());
    dispatcher.on(ACTION.TODO_ADD, function(stores, ...tasks){ //console.log(tasks)
      stores.todo.addTask(...tasks);
      stores.input.init()
    });
    dispatcher.on(ACTION.TODO_TOGGLE, function(stores, i){
      stores.todo.toggle(i);
    });
    dispatcher.on(ACTION.TODO_CLEAR, function(stores){
      stores.todo.clearCompletedTasks();
    });
    dispatcher.on(ACTION.INPUT_WRITING, function(stores, text){
      stores.input.text = text;
    });
    dispatcher.on(ACTION.INPUT_CHANGE, function(stores, priority){
      stores.input.priority = priority
    });

    // riotタグをマウント
    riot.mount("todo", {dispatcher:dispatcher, action:ACTION});
block memo
  section
    h2 解説
    p まず<a href="./todo_2.html">TODO - fluxを使ってみる</a>を読んでることを前提とする。
    ul
      li といっても、タスク入力のフォーム部分と、登録タスクの一覧部分を、子タグとしただけ。
      li 何が優れてるのか？正直わからないけど、みんな細かく分けてる。
      li データのやりとりが面倒だから、理由がない限りは不要だと考えてる
      li このToDoアプリの場合の、分割する必要性は何か？
      li それは、this.update()にある。
      li 例えば、タスクをtoggle()したとき、riotのthisにupdate()がかかる。
      li 書き換わったのはTodoStoreだけなのに、InputStoreのビューにも更新がかかってしまう
      li ビューが少なければよいけど、多いと問題だ。
      li riotタグを分割しておけば、TodoのビューがInputのビューと分かれていれば、
      li TodoStoreの更新時に走るthis.update()は、Todoのビューだけにとどまる
      li この理由から、可能なら分割すべきだと考える。
      li 再利用性を求めて分割は、あり得ないと思ってる。
      li どうせそんな再利用しない。そのriotタグの中からしか呼ばれない
      li 汎用性をもたせるような使い勝手の良い子タグを考えるのは難しいし、
      li 汎用性を求めるばかりに、いろんなパラメタが付加されていき、複雑になって、さっと使えなくなり、使わなくなる
