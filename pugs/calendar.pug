extends ./_layout
block contents
  main
    calendar
    script(type="riot/tag")
      calendar
        h1 カレンダー
        div
          button(onclick="{prev}") 前月
          span  {stores.calendar.year} 年 {stores.calendar.month} 月
          button(onclick="{next}") 来月
        div
          button(onclick="{today}") 今日
        div
          span(each="{day in stores.calendar.days_of_month}") {day}、
        style.
          button {
            background: #ccc;
          }
        .
          const ACTION    = opts.action;
          const dispatcher= opts.dispatcher;
          //this.stores     = dispatcher.getStores();
          this.stores     = dispatcher.stores

          this.stores.calendar.on( "changed", () => { this.update() });

          prev(e) {
            e.preventUpdate = true;
            dispatcher.trigger(ACTION.CALENDAR_PREV_MONTH)
          }
          next(e) {
            e.preventUpdate = true;
            dispatcher.trigger(ACTION.CALENDAR_NEXT_MONTH)
          }
          today(e) {
            e.preventUpdate = true;
            dispatcher.trigger(ACTION.CALENDAR_TODAY)
          }

block append js
  script.
    class CalendarStore extends Store {
      get year()   { return this._year }
      get month()  { return this._month }
      get days_of_month() {
        let days = [];
        for ( let i=1; i<=this.last_day_of_month; i++ ) {
          days.push(i)
        }
        return days;
      }
      get last_day_of_month() {
        return new Date(this.year, this.month, 0).getDate();
      }

      constructor(num=0) {
        super();
        const today = new Date();
        this._year  = today.getFullYear();
        this._month = today.getMonth() + 1;
      }
      reset() {
        const today = new Date();
        this._year  = today.getFullYear();
        this._month = today.getMonth() + 1;
        this.changed()
      }
      nextMonth()   {
        this._month++;
        if ( this._month > 12 ) {
          this._year += 1;
          this._month = 1;
        }
        this.changed()
      }
      prevMonth()   {
        this._month--;
        if ( this._month < 1 ) {
          this._year -= 1;
          this._month = 12;
        }
        this.changed()
      }
    }

    const ACTION = {
      CALENDAR_NEXT_MONTH   : "CALENDAR_NEXT_MONTH",
      CALENDAR_PREV_MONTH   : "CALENDAR_PREV_MONTH",
    };

    let calendar = new CalendarStore();
    dispatcher.addStore("calendar", calendar);
    dispatcher.on(ACTION.CALENDAR_PREV_MONTH, function(stores){stores.calendar.prevMonth()});
    dispatcher.on(ACTION.CALENDAR_NEXT_MONTH, function(stores){stores.calendar.nextMonth()});
    dispatcher.on(ACTION.CALENDAR_TODAY,      function(stores){stores.calendar.reset()});

    riot.mount("calendar", {dispatcher:dispatcher, action:ACTION});
